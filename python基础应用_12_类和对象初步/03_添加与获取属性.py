# -*- coding: utf-8 -*-
"""
@author : xiaoxinxin
@date : 2021/8/5 - 9:49
@file : 03_添加与获取属性.py
@ide : PyCharm
"""


class TestIndex:
    def TestIn(self):
        print('这是类里面的一个函数')
        # 类外添加类内获取属性,此时要求调用该方法的对象要有这么个属性
        print(f'宽度为:{self.width}')
        print(f'长度为:{self.length}')
        # 类内添加属性类内获取属性
        print(f'这是类体内部定义的数据成员:{self.price}')
        print(f'这是类内添加的数据成员:{self.time}')
    # 类内添加属性，实际上最好在__init__()方法里面进行添加
    price = 2000
    time = 2
    sale = 'Petter'


object1 = TestIndex()
# 类外添加属性
object1.length = 100
object1.width = 100
object1.height = 50

# 类外添加类外获取属性
print(f'长度为:{object1.length}')
print(f'高度为:{object1.height}')
object1.TestIn()

# 类内添加类外获取属性
object2 = TestIndex()
print(object2.price)

# 私有成员包括下面两种情况：
# 1. _xxx：一个以下划线开头的成员(可以是数据成员也可以是成员方法)。类和派生类可以访问这些成员，但是类外不建议访问
# 2. __xxx：以两个或者更多的下划线但是不能以两个或更多的下划线结束的成员。这类成员只能在类内访问，在派生类和类外无法访问
"""
类成员：定义在类体中并且独立于所有的方法之外的成员为类成员。属于类本身，一般通过类名调用，不推荐使用对象名调用
实例成员：在类的方法中定义的成员属于实例成员。实例成员只能通过对象调用，一般在构造方法__init__()方法中创建，也可以在其他方法中创建
ps：
1. 当用对象名调用类成员的时候，"对象.类成员"只是"类.类成员"的一份拷贝，当修改了"对象.类成员"时候，"类.类成员"的值不变
2. 当类成员和实例成员同名的时候，在类的方法中和外面，"类名.类成员"调用的是同名的类成员，"self.实例成员"(在类的方法中)或"对象名.实例对象"(在类的外面)调用的
   是同名的实例成员
3. 定义在类的方法中并且没有以self作为前缀的变量是该方法的局部变量

4. 内置成员
__name__：类的名字，用字符串表示
__doc__：类的文档字符串
__bases__：由所有父类组成的元组
__dict__：由类的成员组成的字典
__module__：类所属模块
"""
